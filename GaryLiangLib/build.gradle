apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion



    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.lib_versionCode
        versionName rootProject.ext.android.lib_versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'



    compile rootProject.ext.dependencies.gson
    compile rootProject.ext.dependencies.otto
    compile rootProject.ext.dependencies.retrofit
    compile rootProject.ext.dependencies.retrofit2gson
    compile rootProject.ext.dependencies.okhttp3interceptor
    compile rootProject.ext.dependencies.okhttp3urlconnection
    compile rootProject.ext.dependencies.barlibrary

    compile rootProject.ext.dependencies.design


    compile rootProject.ext.dependencies.smoothRefreshLayout
    compile rootProject.ext.dependencies.smoothRefreshLayouttwo
    compile rootProject.ext.dependencies.smoothRefreshLayouthorizontal


    compile rootProject.ext.dependencies.glide
    annotationProcessor rootProject.ext.dependencies.glidecompiler


    //注解
    compile(rootProject.ext.dependencies.butterknife) {
        exclude group: 'com.android.support'
    }
    annotationProcessor rootProject.ext.dependencies.butterknifecompiler
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    options.charSet = 'UTF-8'
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
